<?php

/**
 * @file
 * Contains views_semantic_tabs.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;


/**
 * Implements hook_help().
 */
function views_semantic_tabs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the views_semantic_tabs module.
    case 'help.page.views_semantic_tabs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a views style plugin to display views results in jQuery UI Tabs.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Prepares variables for Views HTML list templates.
 *
 * Default template: views-view-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A View object.
 */
function template_preprocess_views_semantic_tabs_format(&$variables) {
    $handler  = $variables['view']->style_plugin;

//    // Fetch classes from handler options.
//    if ($handler->options['class']) {
//        $class = explode(' ', $handler->options['class']);
//        $class = array_map('\Drupal\Component\Utility\Html::cleanCssIdentifier', $class);
//
//        // Initialize a new attribute class for $class.
//        $variables['list']['attributes'] = new Attribute(array('class' => $class));
//    }
//
//    // Fetch wrapper classes from handler options.
//    if ($handler->options['wrapper_class']) {
//        $wrapper_class = explode(' ', $handler->options['wrapper_class']);
//        $variables['attributes']['class'] = array_map('\Drupal\Component\Utility\Html::cleanCssIdentifier', $wrapper_class);
//    }
//
//    $variables['list']['type'] = $handler->options['type'];

    // **************************************************** //
    //template_preprocess_views_view_unformatted($variables);

    $view = $variables['view'];
    $rows = $variables['rows'];
    $style = $view->style_plugin;
    $options = $style->options;

    $variables['default_row_class'] = !empty($options['default_row_class']);
    foreach ($rows as $id => $row) {
        $variables['rows'][$id] = array();
        $variables['rows'][$id]['content'] = $row;
        $variables['rows'][$id]['attributes'] = new Attribute();
        if ($row_class = $view->style_plugin->getRowClass($id)) {
            $variables['rows'][$id]['attributes']->addClass($row_class);
        }
    }
}