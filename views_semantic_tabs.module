<?php

/**
 * @file
 * Contains views_semantic_tabs.module..
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function views_semantic_tabs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the views_semantic_tabs module.
    case 'help.page.views_semantic_tabs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a views style plugin to display views results in jQuery UI Tabs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Prepares variables for Views HTML list templates.
 *
 * Default template: views-view-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A View object.
 */
function template_preprocess_views_semantic_tabs_format(&$variables) {
  $handler = $variables['view']->style_plugin;
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $fields = &$view->field;
  $options = $style->options;
  $variables['fields'] = $fields;

  // Attach our library.
  $variables['view']->element['#attached']['library'][] = 'views_semantic_tabs/views-semantic-tabs';

  // Compute advanced configs.
  $advanced_configs = [];
  if (!empty($options['advanced']['options'])) {
    $config_as_text = preg_replace("/[\s]*[\n\r]+[\s]*/", "", $options['advanced']['options']);
    $inputs = explode(',', $config_as_text);
    foreach ($inputs as $input) {
      $config = explode(':', $input);
      $advanced_configs[trim($config[0])] = trim($config[1]);
    }
  }

  // Attached computed advanced settings.
  $unique_id = Html::getUniqueId('tabs');
  $variables['view']->element['#attached']['drupalSettings']['views_semantic_tabs'][$unique_id] = $advanced_configs;

  // Attach our library.
  $variables['view']->element['#attached']['library'][] = 'views_semantic_tabs/views-semantic-tabs';
   $variables['#attached']['library'][] = 'user/drupal.user';
  // Get first group field selected
  if ($options) {
    $first_group_field = $options['group'];
  }

  // Add tabs id and class to main div
  $variables['attributes'] = new Attribute([
    'id' => $unique_id,
    'class' => 'views-semantic-tabs'
  ]);

  $variables['default_row_class'] = !empty($options['default_row_class']);
  foreach ($rows as $id => $row) {
    // todo : hide group field from row content
    // Skip building the attributes and content if the field is to be excluded
    // from the display.
    //  $fields[$first_group_field]->options['exclude'] = ture;
    //  if (!empty($fields[$first_group_field]->options['exclude'])) {
    //    continue;
    //  }

    // todo : group field value should be plain text
    $field_output = $handler->getField($id, $first_group_field);
    $variables['rows']['group'][] = $field_output;
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
    $variables['rows'][$id]['attributes'] = new Attribute();
    if ($row_class = $view->style_plugin->getRowClass($id)) {
      $variables['rows'][$id]['attributes']->addClass($row_class);
    }

    // Add list <a> href value without #
    $variables['list']['href'] = new Attribute(['href' => '']);
  }
}
